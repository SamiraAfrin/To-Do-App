// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	models "To_Do_App/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, task_id
func (_m *Repository) Delete(ctx context.Context, task_id int64) error {
	ret := _m.Called(ctx, task_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, task_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTask provides a mock function with given fields: ctx
func (_m *Repository) GetAllTask(ctx context.Context) ([]*models.Task, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, task_id
func (_m *Repository) GetByID(ctx context.Context, task_id int64) (*models.Task, error) {
	ret := _m.Called(ctx, task_id)

	var r0 *models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Task, error)); ok {
		return rf(ctx, task_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Task); ok {
		r0 = rf(ctx, task_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, task_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, user_id
func (_m *Repository) GetByUserID(ctx context.Context, user_id int64) ([]*models.Task, error) {
	ret := _m.Called(ctx, user_id)

	var r0 []*models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Task, error)); ok {
		return rf(ctx, user_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Task); ok {
		r0 = rf(ctx, user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) Store(ctx context.Context, a *models.Task) error {
	ret := _m.Called(ctx, a)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) error); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, a
func (_m *Repository) Update(ctx context.Context, a *models.Task) error {
	ret := _m.Called(ctx, a)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) error); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDone provides a mock function with given fields: ctx, task_id, task_status
func (_m *Repository) UpdateDone(ctx context.Context, task_id int64, task_status *models.Task) error {
	ret := _m.Called(ctx, task_id, task_status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *models.Task) error); ok {
		r0 = rf(ctx, task_id, task_status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
